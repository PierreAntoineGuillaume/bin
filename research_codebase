#!/usr/bin/env bash

set -uo pipefail

padding_string() {
    printf -- "-%.0s" $(seq 1 $1)
}

research_array=()
research_matches=()
messages=()
trace_padding=$(padding_string 15)

recompute_padding() {
    counter=12
    for i in "${research_array[@]}"; do
        if [ ${#i} -gt $counter ]; then
            counter=${#i}
        fi
    done
    trace_padding=$(padding_string $((counter + 3)))
}

save() {
    {
        echo "#!/bin/env bash"
        echo "research_array=("
        for i in "${research_array[@]}"; do
            echo "  '$i'"
        done
        echo ")"

        echo "research_matches=("
        for i in "${research_matches[@]}"; do
            echo "  '$i'"
        done
        echo ")"
    } > "$1"
}

load() {
    if ! [ -f "$1" ]; then
        messages+=("\e[31merror: could not find file $1\e[0m")
    else
        messages+=("\e[32mLoading from $1\e[0m")
        source "$1"
        recompute_padding
    fi
}

pop() {
    local len=${#research_array[@]}
    if (( $len )); then
        research_array=("${research_array[@]:0:$((len -1))}")
        research_matches=("${research_matches[@]:0:$((len -1))}")
    fi
    if (( $len > 2 )); then
        code -r --goto "${research_array[-1]}"
    fi
    recompute_padding
}

direct_push() {
    push "" "$1"
}

goto() {
    code -r --goto "$1"
}

push() {
    research_matches+=("$1")
    research_array+=("$2");
}

do_find () {
    mapfile -t leads < <(rg -ni "$*" | fzf --multi --extended | awk '{ print $1 }')
    if [ "$?" -eq 0 ]; then
        for lead in "${leads[@]}"; do
            lead=${lead:0: -1}
            push "$*" "$lead"
        done
        if [ -n "${lead+set}" ]; then
            recompute_padding
            goto "$lead"
        fi
    fi
}

controls () {
    if [ "${#messages[@]}" -gt 0 ]; then
        echo "Messages:"
        for message in "${messages[@]}"; do
            echo -e "> $message"
        done
        messages=()
        echo
    fi
    echo "Tracing:"
    local len=${#research_array[@]}
    printf " File: "
    printf -- " %.0s" $(seq 6 "${#trace_padding}")
    printf " Match:\n"
    for i in $(seq 0 $(($len -1))); do
        printf " %s %s %s\n" "${research_array[$i]}" "${trace_padding:${#research_array[$i]}}" "${research_matches[$i]}"
    done
    echo
    echo "pop               : pop last research"
    echo "push <file:line>  : push a file"          
    echo "find              : look for some code"
    echo "save <file>       : save this process in file"
    echo "load <file>       : load some saved process from file"
    echo "code              : opens last in code" 
    echo "quit | c^D        : quit"
    echo
}

clear

while (( $# )); do
    cmd=$1
    shift
    case "$cmd" in
        load)
            load $1
        ;;
        *)
        ;;
    esac
done

controls

while read -p '> ' -er line; do
    if [ -z "$line" ]; then
        continue
    fi
    set -- $line
    cmd=$1
    shift
    case "$cmd" in
        "pop")
            pop
        ;;
        "push")
            direct_push "$1"
        ;;
        "save")
            save "$1"
        ;;
        "load")
            load "$1"
        ;;
        "code")
            len=$(( ${#research_array[@]} - 1 ))
            goto "${research_array[$len]}"
        ;;
        "find")
            do_find "$@"
        ;;
        "quit")
           break;
        ;;
        *)
            messages+=("\e[31merror: Unknown action «$cmd»\e[0m")
        ;;
    esac
    clear
    controls
done
echo
